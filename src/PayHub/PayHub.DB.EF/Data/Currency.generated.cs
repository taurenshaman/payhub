//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.1.3
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace PayHub.DB.Data
{
   public partial class Currency
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Currency()
      {
         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static Currency CreateCurrencyUnsafe()
      {
         return new Currency();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="id"></param>
      /// <param name="name"></param>
      /// <param name="unit"></param>
      public Currency(string id, string name, string unit)
      {
         if (string.IsNullOrEmpty(id)) throw new ArgumentNullException(nameof(id));
         this.Id = id;

         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this.Name = name;

         if (string.IsNullOrEmpty(unit)) throw new ArgumentNullException(nameof(unit));
         this.Unit = unit;


         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="id"></param>
      /// <param name="name"></param>
      /// <param name="unit"></param>
      public static Currency Create(string id, string name, string unit)
      {
         return new Currency(id, name, unit);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required, Min length = 32, Max length = 32
      /// </summary>
      [Key]
      [Required]
      [MinLength(32)]
      [MaxLength(32)]
      [StringLength(32)]
      public string Id { get; set; }

      /// <summary>
      /// Indexed, Required, Min length = 1, Max length = 64
      /// </summary>
      [Required]
      [MinLength(1)]
      [MaxLength(64)]
      [StringLength(64)]
      public string Name { get; set; }

      /// <summary>
      /// Indexed, Required, Min length = 1, Max length = 16
      /// </summary>
      [Required]
      [MinLength(1)]
      [MaxLength(16)]
      [StringLength(16)]
      public string Unit { get; set; }

   }
}

